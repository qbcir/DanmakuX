[danmakux]
# the prefix to be added to the generated functions. You might or might not use this in your own templates
prefix = danmakux

# create a target namespace (in javascript, this would create some code like the equiv. to `ns = ns || {}`)
# all classes will be embedded in that namespace
target_namespace = dx

android_headers = -I%(androidndkdir)s/platforms/android-14/arch-arm/usr/include -I%(androidndkdir)s/sources/cxx-stl/gnu-libstdc++/4.7/libs/armeabi-v7a/include -I%(androidndkdir)s/sources/cxx-stl/gnu-libstdc++/4.7/include -I%(androidndkdir)s/sources/cxx-stl/gnu-libstdc++/4.8/libs/armeabi-v7a/include -I%(androidndkdir)s/sources/cxx-stl/gnu-libstdc++/4.8/include
android_flags = -D_SIZE_T_DEFINED_

clang_headers = -I%(clangllvmdir)s/lib/clang/%(clang_version)s/include
clang_flags = -nostdinc -x c++ -std=c++11 -U __SSE__

lua_headers = -I%(cocosdir)s/cocos/scripting/lua-bindings/manual -I%(cocosdir)s/external/lua/lua -I%(cocosdir)s/external/lua/tolua
cocos_headers = -I%(cocosdir)s/cocos -I%(cocosdir)s/cocos/platform/android -I%(cocosdir)s/cocos/editor-support -I%(cocosdir)s/external
cocos_flags = -DANDROID -DASIO_STANDALONE -D__ANDROID__

cxxgenerator_headers =

dx_classes_dir = %(cocosdir)s/../Classes
dx_input_dir = %(cocosdir)s/../Classes/Input
dx_mgrs_dir = %(cocosdir)s/../Classes/Managers
dx_nodes_dir = %(cocosdir)s/../Classes/Nodes
dx_objs_dir = %(cocosdir)s/../Classes/Objects
dx_data_dir = %(cocosdir)s/../Classes/Data
dx_scenes_dir = %(cocosdir)s/../Classes/Layers
dx_comp_dir = %(cocosdir)s/../Classes/Components

dx_headers = -I%(cocosdir)s/../Classes -I%(dx_mgrs_dir)s -I%(dx_objs_dir)s -I%(dx_data_dir)s -I%(dx_scenes_dir)s

# extra arguments for clang
extra_arguments = %(dx_headers)s %(lua_headers)s %(android_headers)s %(clang_headers)s %(cxxgenerator_headers)s %(cocos_headers)s %(android_flags)s %(clang_flags)s %(cocos_flags)s %(extra_flags)s -I%(cocosdir)s/external/asio/include

# what headers to parse
headers = %(dx_classes_dir)s/Utils/RandomHelper.h %(dx_input_dir)s/Input.h %(dx_nodes_dir)s/Nodes.h %(dx_scenes_dir)s/Layers.h %(dx_objs_dir)s/Objects.h %(dx_data_dir)s/Data.h %(dx_classes_dir)s/Network/NetworkManager.h %(dx_classes_dir)s/GameManager.h %(dx_classes_dir)s/ObjectManager.h %(dx_classes_dir)s/CollisionManager.h %(dx_classes_dir)s/GameAction.h

# what classes to produce code for. You can use regular expressions here. When testing the regular
# expression, it will be enclosed in "^$", like this: "^Menu*$".
classes = RandHelper GameManager CollisionManager ObjectManager ComponentManager NetworkManager .*InputComponent$ InputManager KeyboardManager GameObject PlayerObject ^Vehicle$ ^Bullet$ TimerLabel AnimateLabel PhyTree  Joystick ^Button$ GameAction .*LevelLayer$ .*Desc$

# what should we skip? in the format ClassName::[function function]
# ClassName is a regular expression, but will be used like this: "^ClassName$" functions are also
# regular expressions, they will not be surrounded by "^$". If you want to skip a whole class, just
# add a single "*" as functions. See bellow for several examples. A special class name is "*", which
# will apply to all class names. This is a convenience wildcard to be able to skip similar named
# functions from all classes.
skip = *::[fromJson$ initFromJson$ fromLua$ initFromLua$],
       SimpleLevelDesc::[getBackgroundDesc],
       SpritePCGLayerDesc::[generateData ^create$],
       GameObjectDesc::[getComponentDescs],
       PlayerObject::[addOnPlayerDestroyCb],
       AccelDesc::[create createWithHorizontal createWithVertical],
       ChangeDirectionDesc::[create],
       ChangeSpeedDesc::[create],
       WaitDesc::[create],
       NetworkManager::[pushPacket],
       GameObject::[writeStateBytes readStateBytes],
       InputManager::[getInputPacketList],
       CollisionManager::[getPolygonData]

rename_functions =

rename_classes =

# for all class names, should we remove something when registering in the target VM?
remove_prefix =

# classes for which there will be no "parent" lookup
classes_have_no_parents = GameManager ObjectManager InputManager

# base classes which will be skipped when their sub-classes found them.
base_classes_to_skip =

# classes that create no constructor
abstract_classes =

# Determining whether to use script object(js object) to control the lifecycle of native(cpp) object or the other way around. Supported values are 'yes' or 'no'.
script_control_cpp = no
